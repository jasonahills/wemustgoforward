{"version":3,"sources":["containers/TextEditor/prompts.ts","containers/TextEditor/component.tsx","containers/App/component.tsx","config.ts","serviceWorker.ts","index.tsx"],"names":["prompts","TextEditor","textAreaEl","useRef","useState","randomPrompt","prompt","setPrompt","text","setText","focusTextArea","current","Error","focus","useEffect","numWords","_","compact","split","length","className","onClick","ref","placeholder","value","onChange","e","newText","target","autoComplete","autoCorrect","autoCapitalize","spellCheck","href","downloadHref","download","downloadFilename","index","Math","floor","random","encodeURIComponent","slugFromPrompt","replace","substring","slug","isoDate","moment","format","App","src","alt","VERSION","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qZAAaA,EAAU,CAAC,6BAAD,i6ECUhB,SAASC,IACd,IAAMC,EAA6CC,iBAAO,MAD/B,EAGCC,mBAASC,KAHV,mBAGpBC,EAHoB,KAGZC,EAHY,OAIHH,mBAAS,IAJN,mBAIpBI,EAJoB,KAIdC,EAJc,KAMrBC,EAAgB,WACpB,IAAMC,EAAUT,EAAWS,QAC3B,GAAe,MAAXA,EAAiB,MAAM,IAAIC,MAAM,mCACrCD,EAAQE,SAGVC,qBAAU,WACRJ,MACC,IAEH,IAAMK,EAAWC,IAAEC,QAAQT,EAAKU,MAAM,OAAOC,OAqB7C,OAAO,yBAAKC,UAAU,eACpB,yBAAKA,UAAU,sBACb,0BAAMA,UAAU,4BAA4Bd,GAC5C,0BAAMc,UAAU,2CACd,4BAAQA,UAAU,kCAAkCC,QAhBxC,WAChBd,EAAUF,KACVI,EAAQ,IACRC,MAaI,cACA,4BAAQU,UAAU,kCAAkCC,QAXzC,WACfd,EAAU,IACVE,EAAQ,IACRC,MAQI,eAGJ,yBAAKU,UAAU,oBACb,8BACEE,IAAKpB,EACLkB,UAAU,wBACVG,YAAY,uFACZC,MAAOhB,EACPiB,SAjCa,SAACC,GAClB,IAAMC,EAAUD,EAAEE,OAAOJ,MACrBhB,EAAKW,QAAUQ,EAAQR,QACzBV,EAAQkB,IA+BNE,aAAa,MACbC,YAAY,MACZC,eAAe,MACfC,WAAW,WAGf,yBAAKZ,UAAU,wBACb,uBACEA,UAAU,SACVa,KAAMC,EAAa1B,GACnB2B,SAAUC,EAAiB9B,IAH7B,4BAQF,4BAAQc,UAAU,sBAAlB,eACeL,IAKnB,SAASV,IAEP,IAAMgC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWxC,EAAQmB,QACjD,OAAOnB,EAAQqC,GAGjB,SAASH,EAAa1B,GAEpB,MAAM,iCAAN,OAAwCiC,mBAAmBjC,IAG7D,SAAS4B,EAAiB9B,GAExB,IAAMoC,EAAiBpC,EAAOqC,QAAQ,MAAO,KAAKA,QAAQ,MAAO,IAAIC,UAAU,EAAG,IAC5EC,EAA2B,KAAnBH,EAAyB,mBAAqBA,EAEtDI,EAAUC,MAASC,OAAO,cAChC,MAAM,GAAN,OAAUF,EAAV,YAAqBD,EAArB,Q,MCxEaI,MArBf,WACE,OACE,yBAAK7B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,kBAAkB8B,IAAI,YAAYC,IAAI,WAGzD,yBAAK/B,UAAU,eACb,kBAACnB,EAAD,OAEF,4BAAQmB,UAAU,cAChB,yBAAKA,UAAU,oBACb,mEAAwC,uBAAGA,UAAU,IAAIa,KAAK,uCAAtB,gCAAxC,KACA,8BCnBiEmB,aCUvDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b8644aa.chunk.js","sourcesContent":["export const prompts = [\n  `Write more writing prompts`,\n  `When your eyes adjust to the darkness, you see another figure.`,\n  `Everything changed when she left.`,\n  `She withdrew the bayonet from his still-warm flesh.`,\n  `Finally, she would see the city.`,\n  `She had always wanted to see the city.`,\n  `She never thought she would meet him.`,\n  `The foreman returned, with protection.`,\n  `It was enough that she had said his name.`,\n  `They would see much more of each other in the following days.`,\n  `He tried to catch her eye.`,\n  `\"It's not like the movies.\"`,\n  `\"You get accustomed to it\".`,\n  `\"Well, I suppose that is one way to do it.\"`,\n  `She watched him dance.`,\n  `It wouldn't take much, just a sip of piña colada.`,\n  `\"I want to show you something. It's not far from here.\"`,\n  `It wasn't the sight of blood so much as the smell of it that made her queasy.`,\n  `\"Everyone is going to be going.\"`,\n  `The station attendant looked her up and down.`,\n  `Seeing it, it didn't frighten her so much as fascinate her.`,\n  `\"Do you have a name?\"`,\n  `\"Well, suit up; we have a long day ahead of us.\"`,\n  `\"Please, leave us alone.\"`,\n  `The door began to open.`,\n  `\"She would have been about your age.\"`,\n  `\"What did you think would happen?\"`,\n  `\"You left him alone?, with her?\"`,\n  `\"It's worth a shot.\"`,\n  `She sensed more than felt a cool breeze from underground.`,\n  `\"We're going to have to get under it, somehow.\"`,\n  `He could hear the faintest clink of a piano.`,\n  `You're not certain, but you think it might be breathing.`,\n  `The silhouette looked almost like a woman.`,\n  `And with that, he emptied the whole clip.`,\n  `\"It is with gratitude, Lord, that we--\"  \"Shut up.\"`,\n  `He set the cup on the saucer and smiled.`,\n  `She smiled at him.`,\n  `It had started as a perfect day.`,\n  `\"What do they look like on the inside?\"`,\n  `\"Please.  I'm trying to help you.\"`,\n  `It was as quiet as the city ever got.`,\n  `From above, it looked almost peaceful.`,\n  `She paused to look at the stars.`,\n  `\"If you think about it, it was actually a beautiful thing.\"`,\n  `He never felt fully at home with his mother.`,\n  `She stepped into the boat.`,\n  `\"You're Jonathan?\"  \"No, I'm his brother.\"`,\n  `It seemed there was only one way that this could end.`,\n  `\"Yes, the path leads down, but it also leads up.\"`,\n  `\"I don't want your help.\"`,\n  `\"What could you possibly do for me?\"`,\n  `It was more food than she had seen in weeks.`,\n  `\"I thought you would be taller.\"`,\n  `It was a fine ship.`,\n  `\"But it's more fun because we're wearing costumes.\"`,\n  `\"I never told you how she introduced herself.\"`,\n  `\"It feels like flying.\"`,\n  `\"It tastes almost spicy.\"`,\n]","import './style.css';\n\nimport _ from \"lodash\"\nimport moment from \"moment\"\nimport React from \"react\"\nimport { useEffect, useRef, useState } from \"react\"\n\nimport { prompts } from \"./prompts\"\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function TextEditor() {\n  const textAreaEl: React.Ref<HTMLTextAreaElement> = useRef(null)\n\n  const [prompt, setPrompt] = useState(randomPrompt())\n  const [text, setText] = useState(\"\")\n\n  const focusTextArea = () => {\n    const current = textAreaEl.current\n    if (current == null) throw new Error(\"Should have a text area element\")\n    current.focus()\n  }\n  // Component has mounted\n  useEffect(() => {\n    focusTextArea()\n  }, [])\n\n  const numWords = _.compact(text.split(/\\s/)).length\n\n  const updateText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newText = e.target.value\n    if (text.length <= newText.length) {  // allow for letter changes, e.g. n to ñ\n      setText(newText)\n    }\n  }\n\n  const newPrompt = () => {\n    setPrompt(randomPrompt())\n    setText(\"\")\n    focusTextArea()\n  }\n\n  const noPrompt = () => {\n    setPrompt(\"\")\n    setText(\"\")\n    focusTextArea()\n  }\n\n  return <div className=\"text-editor\">\n    <div className=\"text-editor-prompt\">\n      <span className=\"spaced-sides spaced-tiny\">{prompt}</span>\n      <span className=\"text-editor-prompt-buttons spaced-sides\">\n        <button className=\"button spaced-sides spaced-tiny\" onClick={newPrompt}>New Prompt</button>\n        <button className=\"button spaced-sides spaced-tiny\" onClick={noPrompt}>No Prompt</button>\n      </span>\n    </div>\n    <div className=\"text-editor-main\">\n      <textarea\n        ref={textAreaEl}\n        className=\"text-editor-text-area\"\n        placeholder=\"Enter your response here. No deleting. You can edit your work after you download it.\"\n        value={text}\n        onChange={updateText}\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        autoCapitalize=\"off\"\n        spellCheck=\"false\"\n      />\n    </div>\n    <div className=\"text-editor-commands\">\n      <a\n        className=\"button\"\n        href={downloadHref(text)}\n        download={downloadFilename(prompt)}\n      >\n        Download your response.\n      </a>\n    </div>\n    <footer className=\"text-editor-footer\">\n      word count: {numWords}\n    </footer>\n  </div>\n}\n\nfunction randomPrompt(): string {\n  // TOOD: get from API\n  const index = Math.floor(Math.random() * prompts.length)\n  return prompts[index]  // TODO: Typescript should not be ok with this, because it could be undefined.\n}\n\nfunction downloadHref(text: string): string {\n  // TODO: include prompt, make nice markdown\n  return `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`\n}\n\nfunction downloadFilename(prompt: string): string {\n  // TODO: prompts should be part of filename\n  const slugFromPrompt = prompt.replace(/\\s/g, \"_\").replace(/\\W/g, '').substring(0, 30)\n  const slug = (slugFromPrompt === \"\") ? \"writing-exercise\" : slugFromPrompt\n\n  const isoDate = moment().format(\"YYYY-MM-DD\")\n  return `${isoDate}_${slug}.txt`\n}","import React from 'react';\n\nimport * as cfg from \"wmgf/config\"\nimport { TextEditor } from \"wmgf/containers/TextEditor/component\"\nimport './style.css'\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"app-header-logo-container\">\n          <img className=\"app-header-logo\" src=\"/logo.png\" alt=\"WMGF\" />\n        </div>\n      </header>\n      <div className=\"app-content\">\n        <TextEditor />\n      </div>\n      <footer className=\"app-footer\">\n        <div className=\"app-footer-inner\">\n          <span>Send prompt ideas and feedback to <a className=\"a\" href=\"mailto:wemustgoforwardapp@gmail.com\">wemustgoforwardapp@gmail.com</a>.</span>\n          <span>{cfg.version}</span>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","declare const VERSION: string // provided by webpack define plugin.\n\nexport const version = (typeof VERSION == 'undefined') ? \"RUNNING TESTS\" : VERSION","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'wmgf/style/vars.css';\nimport 'wmgf/style/index.css';\nimport 'wmgf/style/text.css';\nimport 'wmgf/style/elements.css';\nimport 'wmgf/style/layout.css';\nimport App from 'wmgf/containers/App/component';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister()\n"],"sourceRoot":""}